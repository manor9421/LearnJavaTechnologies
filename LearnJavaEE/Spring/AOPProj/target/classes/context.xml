<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- сканируем компоненты, добавляя новые бины -->
<!-- 	<context:component-scan base-package="ru.javabegin.training.*"/> -->


<!-- 	aop:aspect -->
<!-- 	<aop:config> -->
 			<!-- указываем, что данный бин будет аспектом(автоматически подключенный MyLogger(но с маленькой буквы!!!)) -->
<!-- 		<aop:aspect id="log" ref="myLogger"> -->
			<!-- с какими методами работаем. execution указывает, что нужно выполнение метода. Здесь - используем ВСЕ методы класса--> 
 			<!-- при выполнении любого из методов SomeService будет отрабатывать то, что ниже(методы из MyLogger) --> 
<!-- 			<aop:pointcut id="getValue" expression="execution(* ru.javabegin.training.spring.aop.objects.SomeService.*(..))" /> -->
			<!-- вызвать методы getValue(myLogger) - init,close,printValue) -->
 			<!-- до выполнения любого метода в SomeService -->
<!-- 			<aop:before pointcut-ref="getValue" method="init" /> -->
 			<!-- после выполнения любого метода в SomeService ДАЖЕ если будет ошибка --> 
<!-- 			<aop:after pointcut-ref="getValue" method="close" /> -->
			<!-- после возвращения значения -->
<!-- 			<aop:after-returning pointcut-ref="getValue" returning="obj" method="printValue" /> -->
			<!-- Еще есть after throwing - если вылетит ошибка - и after advice - до и после -->
<!-- 		</aop:aspect> -->
<!-- 	</aop:config> -->
	
	
<!-- 	<aop:config> -->
<!-- 		<aop:aspect id="log2" ref="myLogger"> -->
<!-- 			<aop:around pointcut="execution(public * *(..))" method="watchTime" /> -->
<!-- 			</aop:aspect> -->
<!-- 	</aop:config> -->
	
<!-- 	<aop:config> -->
<!-- 		<aop:aspect id="log3" ref="myLogger"> -->
<!-- 			<aop:pointcut expression="execution(public * *(..))" id="allMethods" /> -->
<!-- 			<aop:around pointcut-ref="allMethods" method="watchTime" /> -->
<!-- 			<aop:after-returning pointcut-ref="allMethods" returning="obj" method="print"/> -->
<!-- 		</aop:aspect> -->
<!-- 	</aop:config> -->
		
		<!-- для аннотаций -->
	<context:component-scan base-package="ru.javabegin.training.spring.*" />
	<!-- по-умолч Proxy знает ТОЛЬКО про интерфейсы. И чтобы можно было кастить
		по классам, имплементирующим интерфейсы необходимо добавить proxy-target-class="true" -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

</beans>